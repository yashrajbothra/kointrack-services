generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity", "fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider             = "postgres"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "foreignKeys"
}

model User {
  id               Int      @id @default(autoincrement())
  firstName        String?  @db.VarChar(250)
  middleName       String?  @db.VarChar(250)
  lastName         String?  @db.VarChar(250)
  address          String?  @db.VarChar(150)
  age              Int?
  gender           String?  @db.VarChar(15)
  email            String   @unique() @db.VarChar(320)
  mobile           Int?
  password         String   @db.Text
  role             String?  @db.VarChar(20)
  isActive         Boolean  @default(true)
  isEmailVerified  Boolean? @default(false)
  isMobileVerified Boolean? @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  Session Session[]
  Otp     Otp[]

  @@map("users")
}

model Session {
  id           Int      @id @unique @default(autoincrement())
  refreshToken String   @db.Uuid
  userAgent    String   @db.VarChar(250)
  ipAddress    String   @db.VarChar(50)
  role         String   @db.VarChar(20)
  email        String   @db.VarChar(320)
  isActive     Boolean  @default(true)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model Otp {
  id        Int      @id @unique @default(autoincrement())
  otp       Int
  user      User     @relation(fields: [userId], references: [id])
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId Int

  @@map("otp")
}

model Cryptocurrency {
  id                     Int                     @id @unique() @default(autoincrement())
  provider               Provider                @relation(fields: [providerId], references: [id])
  resourceId             Int
  name                   String                  @db.VarChar(120)
  symbol                 String                  @db.VarChar(80)
  slug                   String                  @unique() @db.VarChar(256)
  // Valid Values "active", "inactive", "untracked"
  status                 String                  @default("active") @db.Char(10)
  sign                   String?                 @db.VarChar(10)
  rank                   Int?
  isActive               Boolean                 @default(true)
  cryptocurrencymetadata CryptocurrencyMetadata?
  platform               Platform?               @relation(fields: [platformId], references: [parentCryptoId])
  firstHistoricalData    DateTime?
  tokenAddress           String?                 @db.VarChar(256)
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt

  MarketData     MarketData[]
  OHLCV          OHLCV[]
  CryptoExchange CryptoExchange[]
  Exchange       Exchange[]
  providerId     Int
  platformId     Int?

  @@unique(fields: [resourceId, providerId], name: "resource")
  @@map("cryptocurrency")
}

model Platform {
  parentCryptoId Int              @id @unique
  Cryptocurrency Cryptocurrency[]

  @@map("platform")
}

model CryptocurrencyMetadata {
  cryptoId                      Int                   @id @unique()
  cryptocurrency                Cryptocurrency        @relation(fields: [cryptoId], references: [id], onDelete: Cascade)
  logoUrl                       String                @db.Text
  description                   String                @db.Text
  category                      Category              @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  urls                          Urls?                 @relation(fields: [urlsId], references: [id], onDelete: Cascade)
  notice                        String?               @db.Text
  selfReportedCirculatingSupply Decimal?              @db.Decimal()
  selfReportedMarketCap         Decimal?              @db.Decimal()
  selfReportedTags              String?
  numMarketPairs                Int?
  circulatingSupply             Decimal?              @db.Decimal()
  totalSupply                   Decimal?              @db.Decimal()
  maxSupply                     Decimal?              @db.Decimal()
  volume24h                     Float?
  volumeChange24h               Float?
  pricePercentageChange24h      Float?
  pricePercentageChange1h       Float?
  pricePercentageChange30d      Float?
  pricePercentageChange60d      Float?
  pricePercentageChange90d      Float?
  marketCapDominance            Float?
  contractAddress               BlockchainContracts[]
  tags                          Tags[]                @relation("TagsInMetadata")
  dateAdded                     DateTime              @db.Timestamptz()
  dateLaunched                  DateTime?             @db.Timestamptz()
  createdAt                     DateTime              @default(now())
  updatedAt                     DateTime              @updatedAt

  categoryId Int
  urlsId     Int

  @@map("cryptocurrency_metadata")
}

model BlockchainContracts {
  id              Int    @id @unique @default(autoincrement())
  name            String
  contractAddress String

  cryptocurrencyMetadata CryptocurrencyMetadata @relation(fields: [cryptoId], references: [cryptoId])
  cryptoId               Int

  @@map("blockchain_contracts")
}

model Urls {
  id                     Int                      @id @unique @default(autoincrement())
  //Lists
  website                String[]
  technicalDocumentation String[]
  explorer               String[]
  sourceCode             String[]
  messageBoard           String[]
  blog                   String[]
  chat                   String[]
  announcement           String[]
  reddit                 String[]
  twitter                String[]
  telegram               String[]
  fee                    String[]
  CryptocurrencyMetadata CryptocurrencyMetadata[]
  ExchangeMetadata       ExchangeMetadata[]

  @@map("urls")
}

model Category {
  id                     Int                      @id @unique @default(autoincrement())
  name                   String                   @unique @db.VarChar(256)
  slug                   String                   @unique
  CryptocurrencyMetadata CryptocurrencyMetadata[]

  @@map("category")
}

model Tags {
  id        Int       @id @unique @default(autoincrement())
  name      String
  slug      String    @unique
  tagsGroup TagsGroup @relation(fields: [tagsGroupId], references: [id])

  tagsGroupId            Int
  CryptocurrencyMetadata CryptocurrencyMetadata[] @relation("TagsInMetadata")

  @@map("tags")
}

model TagsGroup {
  id   Int    @id @unique @default(autoincrement())
  name String @unique

  Tags Tags[]

  @@map("tags_group")
}

model OHLCV {
  id             Int            @id @default(autoincrement())
  cryptocurrency Cryptocurrency @relation(fields: [cryptocurrencyId], references: [id], onDelete: Cascade)
  openPrice      Float
  highPrice      Float
  lowPrice       Float
  closePrice     Float
  tradedVolume   Int
  createdAt      DateTime       @db.Timestamptz()

  cryptocurrencyId Int
  Exchange         Exchange? @relation(fields: [exchangeId], references: [id])
  exchangeId       Int?

  @@map("ohlcv")
}

model MarketData {
  id             Int            @id @unique @default(autoincrement())
  cryptocurrency Cryptocurrency @relation(fields: [cryptocurrencyId], references: [id], onDelete: Cascade)
  updatedAt      DateTime       @updatedAt

  cryptocurrencyId Int
  Exchange         Exchange? @relation(fields: [exchangeId], references: [id], onDelete: NoAction)
  exchangeId       Int?

  @@map("market_data")
}

model Currency {
  id            Int             @id @unique @default(autoincrement())
  name          String
  slug          String?
  ExchangeRates ExchangeRates[]

  @@map("currency")
}

model ExchangeRates {
  id       Int      @id @unique @default(autoincrement())
  currency Currency @relation(fields: [currencyId], references: [id])

  currencyId Int

  @@map("exchange_rates")
}

model Exchange {
  id        Int      @unique() @default(autoincrement())
  name      String   @db.VarChar(256)
  slug      String   @db.VarChar(256)
  //Valid values are ('active','inactive','untracked','tracked')
  status    String   @db.VarChar(10)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  MarketData       MarketData[]
  OHLCV            OHLCV[]
  ExchangeMetadata ExchangeMetadata[]
  Cryptocurrency   Cryptocurrency     @relation(fields: [cryptocurrencyId], references: [id], onDelete: Cascade)
  ExchangeFee      ExchangeFee        @relation(fields: [exchangeFeeId], references: [exchangeId])
  exchangeFeeId    Int
  cryptocurrencyId Int
  CryptoExchange   CryptoExchange[]

  @@map("exchange")
}

model ExchangeCategory {
  id                             Int               @unique @default(autoincrement())
  name                           String            @unique @db.VarChar(256)
  slug                           String            @unique
  category                       String            @db.VarChar(256)
  ExchangeMetadata               ExchangeMetadata? @relation(fields: [exchangeMetadataExchangeMetaId], references: [exchangeMetaId])
  exchangeMetadataExchangeMetaId Int?

  @@map("exchange_category")
}

model ExchangeMetadata {
  exchangeMetaId      Int       @id @unique
  Exchange            Exchange  @relation(fields: [exchangeMetaId], references: [id])
  logoUrl             String    @db.Text
  description         String    @db.Text
  notice              String?
  rank                Int?
  marketPairs         String?   @db.VarChar(100)
  markets             Int?
  firstHistoricalData DateTime? @db.Timestamptz()
  lastHistoricalData  DateTime? @db.Timestamptz()
  weeklyVisits        Int
  dateLaunched        DateTime  @db.Timestamptz()

  Urls Urls @relation(fields: [UrlsId], references: [id])

  UrlsId             Int
  exchangeCategoryId Int
  ExchnageFee        ExchangeFee[]
  ExchangeCategory   ExchangeCategory[]

  @@map("exchange_metadata")
}

model ExchangeFee {
  exchangeId         Int               @id @unique
  feeType            String            @db.VarChar(256)
  makerFee           Float
  takerFee           Float
  ExchangeMetadata   ExchangeMetadata? @relation(fields: [exchangeMetadataId], references: [exchangeMetaId])
  exchangeMetadataId Int?
  Exchange           Exchange[]

  @@map("exchange_fee")
}

model CryptoExchange {
  cryptoCurrency   Cryptocurrency @relation(fields: [cryptocurrencyId], references: [id])
  cryptocurrencyId Int
  exchange         Exchange       @relation(fields: [exchangeId], references: [id])
  exchangeId       Int

  @@id([exchangeId, cryptocurrencyId])
  @@map("crypto_exchange")
}

model GlobalMetrics {
  id                                      Int    @id @unique @default(autoincrement())
  activeCryptocurrencies                  Int?
  totalCryptocurrencies                   Int?
  activeMarketPairs                       Int?
  activeExchanges                         Int?
  totalExchanges                          Int?
  ethDominance                            Float?
  btcDominance                            Float?
  ethDominance24hPercentageChange         Float?
  btcDominance24hPercentageChange         Float?
  defiVolume24h                           Float?
  defiVolume24hReported                   Float?
  defi24hPercentageChange                 Float?
  defiMarketCap                           Float?
  stablecoinVolume24h                     Float?
  stablecoinVolume24hReported             Float?
  stablecoinMarketCap                     Float?
  stablecoin24hPercentageChange           Float?
  derivativesVolume24h                    Float?
  derivativesVolume24hReported            Float?
  derivatives24hPercentageChange          Float?
  totalMarketCap                          Float?
  totalMarketCapYesterday                 Float?
  totalMarketCapYesterdayPercentageChange Float?
  totalVolume24h                          Float?
  totalVolume24hReported                  Float?
  totalVolume24hYesterday                 Float?
  totalVolume24hYesterdayPercentageChange Float?
  altcoinVolume24h                        Float?
  altcoinVolume24hReported                Float?
  altcoinMarketCap                        Float?

  timestamp DateTime @unique @db.Timestamptz()
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("global_metrics")
}

model Provider {
  id       Int     @id @unique @default(autoincrement())
  name     String  @unique
  slug     String  @unique
  baseUrl  String
  isActive Boolean @default(true)

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  Cryptocurrency Cryptocurrency[]

  @@map("provider")
}
